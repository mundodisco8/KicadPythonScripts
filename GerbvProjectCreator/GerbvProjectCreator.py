#!/usr/bin/env python3
import os
from os import path
import json
import collections # for the OrderedDict
import subprocess

# Version 2! Now with more JSON. The gerber project generated by kicad is a very
# good source for the files in a folder. Let's use it to get the files!

### Some global variables

projectFileName = "Gerbv_Project.gvp"

# Colours
DrillsPlated = "0 65535 0"            # Just Green
DrillsNonPlated = "25600 65535 65535" # Neon Blue
CopperTop = "49184 3583 1439"       # Dark Red
CopperBottom = "0 0 43865"          # Dark Blue
CopperIn1 = "0 50115 50115"         # Teal
CopperIn2 = "41216 0 36352"         # Purple
SolderTop = "41060 41060 41060"     # Dark Grey
SolderBottom = "41120 41120 41120"   # Light Grey
SilkTop = "65535 65535 65535"       # White
SilkBottom = "65535 52747 52747"    # Pinkish
MaskTop = "65535 40573 0"           # Orange
MaskBottom = "65535 40606 0"        # Orange
Drawings = "57379 58080 5620"       # Yellow
Comments = "30125 30125 65535"      # Blue
Profile = "0 50115 50115"           # Teal
Eco = "17151 59391 17151"           # Green
Undefined = "65535 65535 65535"

# Dictionary with the layer colours

# It will contain a third element on the list, with the layer order, but
# we add it programatically because it's a forking pain in the ass to do it
# every time we change the order
layerPropertiesDict = collections.OrderedDict()
layerPropertiesDict = {
    #drills
    "Drills,Plated":        [DrillsPlated, "t"],
    "Drills,PlatedMap":     [DrillsPlated, "t"],
    "Drills,NonPlated":     [DrillsNonPlated, "t"],
    "Drills,NonPlatedMap":  [DrillsNonPlated, "t"],
    "Profile":              [Profile, "t"], # Edge_Cuts
    "Drawings":             [Drawings, "t"], # Dwgs.User
    "Comments":             [Comments, "t"], # Cmts.User
    "Eco1.User":            [Eco, "f"],
    "Eco2.User":            [Eco, "f"],
    "Margin":               [Comments, "t"],
    "Glue,Top":             [Undefined, "f"], # Adhes
    "Courtyard,Top":        [Comments, "f"],
    "AssemblyDrawing,Top":  [Undefined, "f"],# F_Fab
    "Legend,Top":           [SilkTop, "t"],
    "SolderPaste,Top":      [SolderTop, "t"],
    "SolderMask,Top":       [MaskTop, "t"],
    "Copper,L1,Top":        [CopperTop, "t"],
    "Copper,L2,Inr":        [CopperIn1, "t"],
    "Copper,L3,Inr":        [CopperIn2, "t"],
    "Glue,Bot":             [Undefined, "f"],
    "Courtyard,Bot":        [Comments, "f"],
    "AssemblyDrawing,Bot":  [Undefined, "t"],
    "Legend,Bot":           [SilkBottom, "t"],
    "SolderPaste,Bot":      [SolderBottom, "t"],
    "SolderMask,Bot":       [MaskBottom, "t"],
    "Copper,L2,Bot":        [CopperBottom, "t"],
    "Copper,L4,Bot":        [CopperBottom, "t"],
}

# Initially, I thought it was going to do more stuff :D
def returnLayerProperties(fileFunction):
    return layerPropertiesDict[fileFunction]

# This function gets a partially filled stackup and adds those layers that are
# not present in the gerber job file
def loadFilesCommon(stackUp):
    ### Now, some files are not in the gerber job file, and I really don't know why
    # They are not manufacturing files, so I guess that's the reason. Let's check
    # for them manually. Surprisingly, the drill files are not in the project file
    # either
    files = [f for f in os.listdir(".") if path.isfile(f)]
    for file in files:
        # Eco2 Layer
        key = None
        if file.endswith("Eco2_User.gbr"):
            print("Found layer Eco2")
            key = returnLayerProperties("Eco2.User")
        elif file.endswith("Eco1_User.gbr"):
            print("Found layer Eco1")
            key = returnLayerProperties("Eco1.User")
        elif file.endswith("Dwgs_User.gbr"):
            print("Found layer Drawings")
            key = returnLayerProperties("Drawings")
        elif file.endswith("Cmts_User.gbr"):
            print("Found layer Comments")
            key = returnLayerProperties("Comments")
        elif file.endswith("F_CrtYd.gbr"):
            print("Found layer Courtyard top")
            key = returnLayerProperties("Courtyard,Top")
        elif file.endswith("B_CrtYd.gbr"):
            print("Found layer Courtyard Bottom")
            key = returnLayerProperties("Courtyard,Bot")
        elif file.endswith("-PTH.drl"):
            print("Found layer PTH drill")
            key = returnLayerProperties("Drills,Plated")
        elif file.endswith("-NPTH.drl"):
            print("Found layer NPTH drill")
            key = returnLayerProperties("Drills,NonPlated")
        elif file.endswith("-PTH-drl_map.gbr"):
            print("Found layer PTH drill map")
            key = returnLayerProperties("Drills,PlatedMap")
        elif file.endswith("-NPTH-drl_map.gbr"):
            print("Found layer NPTH drill map")
            key = returnLayerProperties("Drills,NonPlatedMap")
        if key != None:
            # just for an extra readibility
            (layerVisibility, layerColour, layerOrder) = key
            stackUp[layerOrder] = (file, layerVisibility, layerColour)
    return stackUp

def loadFilesFromDir(stackUp):
    files = [f for f in os.listdir(".") if path.isfile(f)]
    for file in files:
        # Remove the extension. It will be either gbr or the protel one, but
        # we will use the last bit of the filename to identify the layer
        fileNoExt = os.path.splitext(file)[0]
        print(file)
        key = None
        if fileNoExt.endswith("-F_Cu"):
            print("Found layer Top Copper")
            key = returnLayerProperties("Copper,L1,Top")
        elif fileNoExt.endswith("-In1_Cu"):
            print("Found layer Inner 2")
            key = returnLayerProperties("Copper,L2,Inr")
        elif fileNoExt.endswith("-In2_Cu"):
            print("Found layer Inner 3")
            key = returnLayerProperties("Copper,L3,Inr")
        elif fileNoExt.endswith("-B_Cu"):
            print("Found layer Bottom Copper")
            key = returnLayerProperties("Copper,L2,Bot")
        elif fileNoExt.endswith("-F_Adhes"):
            print("Found layer Glue Top")
            key = returnLayerProperties("Glue,Top")
        elif fileNoExt.endswith("-B_Adhes"):
            print("Found layer Glue Bot")
            key = returnLayerProperties("Glue,Bot")
        elif fileNoExt.endswith("-F_Paste"):
            print("Found layer Paste Top")
            key = returnLayerProperties("SolderPaste,Top")
        elif fileNoExt.endswith("-B_Paste"):
            print("Found layer Paste Bot")
            key = returnLayerProperties("SolderPaste,Bot")
        elif fileNoExt.endswith("-F_SilkS"):
            print("Found layer Silk Top")
            key = returnLayerProperties("Legend,Top")
        elif fileNoExt.endswith("-B_SilkS"):
            print("Found layer Silk Bot")
            key = returnLayerProperties("Legend,Bot")
        elif fileNoExt.endswith("-Edge_Cuts"):
            print("Found layer Board Edge")
            key = returnLayerProperties("Profile")
        elif fileNoExt.endswith("-F_Fab"):
            print("Found layer Fabrication Top")
            key = returnLayerProperties("AssemblyDrawing,Top")
        elif fileNoExt.endswith("-B_Fab"):
            print("Found layer Fabrication Bot")
            key = returnLayerProperties("AssemblyDrawing,Bot")
        elif fileNoExt.endswith("-F_Mask"):
            print("Found layer Mask top")
            key = returnLayerProperties("SolderMask,Top")
        elif fileNoExt.endswith("-B_Mask"):
            print("Found layer Mask Bot")
            key = returnLayerProperties("SolderMask,Bot")
        else:
            print("Nothing")
        if key != None:
            # just for an extra readibility
            (layerVisibility, layerColour, layerOrder) = key
            stackUp[layerOrder] = (file, layerVisibility, layerColour)

    stackUp = loadFilesCommon(stackUp)
    # Some of the layers will be missing, delete the layers that don't have a file
    stackUp = [layer for layer in stackUp if (layer != None)]
    return stackUp


def loadFilesFromJobFile(stackUp, gerberJobFile):
    # Load the present files / layers from the project file
    with open(gerberJobFile, 'r') as f:
        layers_dict = json.load(f)

    ### Get the present gerbers in this project from the project file, find their
    # colour and what's their relative order in the stackup
    for layer in layers_dict["FilesAttributes"]:
        # List of files in project
        filename = layer["Path"]
        print("Found layer %s" % (layer["FileFunction"]))
        (layerVisibility, layerColour, layerOrder) = returnLayerProperties(layer["FileFunction"])
        #print("%s: %s, %s" % (filename, colourAndOrder[0], colourAndOrder[2]))
        stackUp[layerOrder] = (filename, layerVisibility, layerColour)

    stackUp = loadFilesCommon(stackUp)
    # Some of the layers will be missing, delete the layers that don't have a file
    stackUp = [layer for layer in stackUp if (layer != None)]
    return stackUp


### Start adding the order element to the dictionary tuples.
for i, key in enumerate(layerPropertiesDict):
    layerPropertiesDict[key] = layerPropertiesDict[key]+[i]
    #print(layerPropertiesDict[key])

### Read the json from Kicad with the gerbers info
# Search for the project file
gerberJobFile = ""
stackUp = [None] * len(layerPropertiesDict) # will contain the layer file and colour, and it will be in the right order
files = [f for f in os.listdir(".") if path.isfile(f)]
for file in files:
    if file.endswith("-job.gbrjob"):
        gerberJobFile = file
        print("\nFound project file! %s\n" % gerberJobFile)
        stackUp = loadFilesFromJobFile(stackUp, gerberJobFile)
        break
else:
    print("\nNo Job File Found, trying to search the dir for gerbers\n")
    stackUp = loadFilesFromDir(stackUp)


################################################################################

# Time to build the layer properties for the project file, it has this format
# (define-layer! (LAYERNUMBER) (cons "[FILENAME])
#     (cons 'visible #(t or f))
#     (cons 'color #( R G B ))
#     (cons 'alpha #( ALPHA))
# )

# Layer properties will contain each layer's properties
# This is the text that will go into the file
layerProperties = [None] * len(stackUp)
for i, (filename, layerVisibility, layerColour) in enumerate(reversed(stackUp)):
    layerProperties[i] = """(define-layer! %d (cons 'filename \"%s\")
    (cons 'visible #%s)
    (cons 'color #(%s))
    (cons 'alpha #(65535))
)\n""" % (len(stackUp) - i, filename, layerColour, layerVisibility)

# Write the file!
f = open(projectFileName, "w+")
f.write("(gerbv-file-version! \"2.0A\")\n")
for layer in layerProperties:
    f.write(layer)
# and close
f.write("""(define-layer! -1 (cons 'filename "%s")
    (cons 'color #(2000 2000 2000))
)
(set-render-type! 2)""" % (os.getcwd()+"/"+projectFileName))
f.close()

### Search for gerbv and open it if it finds it
pathToGerbv = "C:/Users/Joel/Desktop/Gerb/App/gerbv64/bin/gerbv.exe"
exists = os.path.isfile(pathToGerbv)
if (exists):
    print(projectFileName)
    # Opens Gerbv in mm and with the right project file
    # Open Process, don't wait for it to end and ignore output
    process = subprocess.Popen([pathToGerbv, "--units=mm", "-p" + projectFileName], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).pid
else:
    print("Doh!")
print("DONE")
input("\nPress Enter to close this window...")